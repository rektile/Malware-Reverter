from classes.analyzers.Analyzer import Analyzer
from classes.snapshots.FolderSnapshot import FolderSnapshot
from classes.dataTypes.Changes import Changes
import os
from copy import deepcopy


class FolderAnalyzer(Analyzer):

    def __init__(self):
        super().__init__()
        self.folderPaths = [
            r"C:\Users\olegn\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
        ]

    def snapshot(self) -> list[FolderSnapshot]:

        snapShots: list[FolderSnapshot] = []

        for folderPath in self.folderPaths:
            fullPath = os.path.expandvars(folderPath)
            for root, dirs, files in os.walk(fullPath):
                for filename in files:
                    snap = FolderSnapshot(root, filename)
                    snapShots.append(snap)

        return snapShots

    def compare(self):

        allChanges = []

        copySnapshot1 = deepcopy(self.snapshot1)
        copySnapshot2 = deepcopy(self.snapshot2)

        for snapshot1 in self.snapshot1:
            for snapshot2 in self.snapshot2:
                if snapshot1.path == snapshot2.path and snapshot1.programName == snapshot2.programName:
                    if snapshot1.fileHash != snapshot2.fileHash:
                        change = Changes(snapshot1.path, (snapshot1.programName, snapshot1.fileHash),
                                         (snapshot2.programName, snapshot2.fileHash))
                        allChanges.append(change)
                        copySnapshot1.remove(snapshot1)
                        copySnapshot2.remove(snapshot2)
                    break

        for snapAfter in copySnapshot2:
            if snapAfter not in copySnapshot1:
                change = Changes(snapAfter.path, None, (snapAfter.programName, snapAfter.fileHash))
                allChanges.append(change)

        for snapBefore in copySnapshot1:
            if snapBefore not in copySnapshot2:
                change = Changes(snapBefore.path, (snapBefore.programName, snapBefore.fileHash), None)
                allChanges.append(change)

        self.difference = allChanges
