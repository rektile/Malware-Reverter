from classes.analyzers.Analyzer import Analyzer
from classes.dataTypes.RegistryTree import RegistryTree
from classes.snapshots.RegistrySnapshot import RegistrySnapshot
from classes.dataTypes.Changes import Changes
from classes.utils import *
import winreg


class RegistryAnalyzer(Analyzer):

    def __init__(self):
        super().__init__()
        self.registryPaths = None

    def makeTree(self, fullPath: str) -> RegistryTree:
        hkey, path = prepareRegistryPath(fullPath)
        soft = winreg.OpenKey(hkey, path)

        Rt = RegistryTree()
        Rt.currentKey = fullPath

        i = 0

        while True:
            try:
                name, valueData, identifier = winreg.EnumValue(soft, i)

                Rt.values[name] = valueData

                i += 1
            except OSError:
                break

        j = 0
        while True:
            try:
                key = winreg.EnumKey(soft, j)

                childKey = fullPath + f"\\{key}"
                childTree = self.makeTree(childKey)

                Rt.childKeys.append(childTree)

                j += 1
            except OSError:
                break

        return Rt

    def compare(self):
        allChanges = []
        for snap1, snap2 in zip(self.snapshot1, self.snapshot2):
            dict1 = snap1.registryTree.toDict()
            dict2 = snap2.registryTree.toDict()

            pathBefore = list(dict1.keys())
            pathAfter = list(dict2.keys())

            pathNotInAfter = list(set(pathBefore) - set(pathAfter))

            for registryKey, valuesAfter in dict2.items():

                keysAfter = list(valuesAfter.keys())

                try:
                    valuesBefore = dict1[registryKey]
                    keysBefore = list(valuesBefore.keys())
                    keysNotInAfter = list(set(keysBefore) - set(keysAfter))
                except KeyError:
                    valuesBefore = []
                    keysBefore = []
                    keysNotInAfter = []


                for value, data in valuesAfter.items():
                    # Check for new
                    if not valuesBefore or value not in valuesBefore:
                        change = Changes(registryKey, None, (value, valuesAfter[value]))
                        allChanges.append(change)

                    # Check for change
                    elif valuesBefore[value] != valuesAfter[value]:
                        change = Changes(registryKey, (value, valuesBefore[value]), (value, valuesAfter[value]))
                        allChanges.append(change)


                # Check for deleted in existing keys
                for keys in keysNotInAfter:
                    change = Changes(registryKey, (keys, valuesBefore[keys]), None)
                    allChanges.append(change)

            # Check for deleted in deleted keys
            for path in pathNotInAfter:
                for value, data in dict1[path].items():
                    change = Changes(path, (value, data), (value, None))
                    allChanges.append(change)

        self.difference = allChanges

    def snapshot(self) -> list[RegistrySnapshot]:

        snapShots: list[RegistrySnapshot] = []

        for path in self.registryPaths:
            registryTree = self.makeTree(path)
            snap = RegistrySnapshot(registryTree)
            snapShots.append(snap)

        return snapShots

