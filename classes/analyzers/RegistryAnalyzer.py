from classes.analyzers.Analyzer import Analyzer
from classes.dataTypes.RegistryTree import RegistryTree
from classes.snapshots.RegistrySnapshot import RegistrySnapshot
from classes.dataTypes.Changes import Changes
import winreg


class RegistryAnalyzer(Analyzer):

    def __init__(self):
        super().__init__()
        self.registryPaths = None

    def makeTree(self, fullPath: str) -> RegistryTree:
        hkey, path = self.prepareRegistryPath(fullPath)
        soft = winreg.OpenKey(hkey, path)

        Rt = RegistryTree()
        Rt.currentKey = fullPath

        i = 0

        while True:
            try:
                name, valueData, identifier = winreg.EnumValue(soft, i)

                Rt.values[name] = valueData

                i += 1
            except OSError:
                break

        j = 0
        while True:
            try:
                key = winreg.EnumKey(soft, j)

                childKey = fullPath + f"\\{key}"
                childTree = self.makeTree(childKey)

                Rt.childKeys.append(childTree)

                j += 1
            except OSError:
                break

        return Rt

    def compare(self):
        allChanges = []
        for snap1, snap2 in zip(self.snapshot1, self.snapshot2):
            dict1 = snap1.registryTree.toDict()
            dict2 = snap2.registryTree.toDict()

            for registryKey, valuesAfter in dict2.items():
                valuesBefore = dict1[registryKey]
                for value, data in valuesAfter.items():
                    #print(value)
                    #print(valuesBefore)
                    if value not in valuesBefore:
                        print("a")
                        change = Changes(registryKey, (value, None), (value, valuesAfter[value]))
                        allChanges.append(change)
                    elif valuesBefore[value] != valuesAfter[value]:
                        print("b")
                        change = Changes(registryKey, (value, valuesBefore[value]), (value, valuesAfter[value]))
                        allChanges.append(change)

        self.difference = allChanges

    def showResults(self):
        print("[*] These are the changes in the Startup registry keys")
        lastLocation = None
        for change in self.difference:
            if change.location != lastLocation:
                lastLocation = change.location
                print(f"[-] {change.location}")

            if not change.valueBefore[1]:
                print(f"\t[-] New:")
                print(f"\t\t{change.valueAfter[0]}:{change.valueAfter[1]}")
            else:
                print(f"\t[-] Changed:")
                print(f"\t\t{change.valueBefore[0]}:{change.valueBefore[1]} -> {change.valueAfter[0]}:{change.valueAfter[1]}")

        print()


    def snapshot(self) -> list[RegistrySnapshot]:

        snapShots: list[RegistrySnapshot] = []

        for path in self.registryPaths:
            registryTree = self.makeTree(path)
            snap = RegistrySnapshot(registryTree)
            snapShots.append(snap)

        return snapShots

    def prepareRegistryPath(self, path):
        HKeyString, restOfPath = path.split("\\", 1)

        if HKeyString == "HKEY_LOCAL_MACHINE":
            return winreg.HKEY_LOCAL_MACHINE, restOfPath
        elif HKeyString == "HKEY_CURRENT_USER":
            return winreg.HKEY_CURRENT_USER, restOfPath
