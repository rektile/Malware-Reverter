from classes.analyzers.Analyzer import Analyzer
from classes.dataTypes.RegistryTree import RegistryTree
from classes.snapshots.RegistrySnapshot import RegistrySnapshot
import winreg


class RegistryAnalyzer(Analyzer):

    def __init__(self):
        super().__init__()
        self.registryPaths = None

    def makeTree(self, fullPath: str) -> RegistryTree:
        hkey, path = self.prepareRegistryPath(fullPath)
        soft = winreg.OpenKey(hkey, path)

        Rt = RegistryTree()
        Rt.currentKey = fullPath

        i = 0

        while True:
            try:
                name, valueData, identifier = winreg.EnumValue(soft, i)

                Rt.values[name] = valueData

                i += 1
            except OSError:
                break

        j = 0
        while True:
            try:
                key = winreg.EnumKey(soft, j)

                childKey = fullPath + f"\\{key}"
                childTree = self.makeTree(childKey)

                Rt.childKeys.append(childTree)

                j += 1
            except OSError:
                break

        return Rt

    def snapshot(self) -> list[RegistrySnapshot]:

        snapShots: list[RegistrySnapshot] = []

        for path in self.registryPaths:
            registryTree = self.makeTree(path)
            snap = RegistrySnapshot(registryTree)
            snapShots.append(snap)

        return snapShots

    def prepareRegistryPath(self, path):
        HKeyString, restOfPath = path.split("\\", 1)

        if HKeyString == "HKEY_LOCAL_MACHINE":
            return winreg.HKEY_LOCAL_MACHINE, restOfPath
        elif HKeyString == "HKEY_CURRENT_USER":
            return winreg.HKEY_CURRENT_USER, restOfPath
