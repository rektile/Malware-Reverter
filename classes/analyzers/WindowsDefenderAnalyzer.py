import winreg
from classes.RegistryTree import RegistryTree

class WindowsDefenderAnalyzer:
    def __init__(self):

        self.defenderRegistry = [
            "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender",
            "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender",
            "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy"
        ]


    def makeSnapshot(self):

        snapShots = []

        for path in self.defenderRegistry:
            hkey, registryPath = self.prepareRegistryPath(path)
            registryTree = self.makeTree(hkey, registryPath)
            snapShots.append(registryTree)

        return snapShots

    def makeTree(self, hkey, path):
        soft = winreg.OpenKey(hkey, path)

        Rt = RegistryTree()
        Rt.currentKey = path

        i = 0

        while True:
            try:
                name, valueData, identifier = winreg.EnumValue(soft, i)

                Rt.values[name] = valueData

                i += 1
            except OSError:
                break


        while True:
            try:
                key = winreg.EnumKey(soft, i)
                childKey = path + f"\\{key}"

                childTree = self.makeTree(hkey, childKey)

                Rt.childKeys.append(childTree)

                i += 1
            except OSError:
                break

        return Rt

    def prepareRegistryPath(self, path):
        HKeyString, restOfPath = path.split("\\", 1)

        match HKeyString:
            case "HKEY_LOCAL_MACHINE":
                return winreg.HKEY_LOCAL_MACHINE, restOfPath
            case "HKEY_CURRENT_USER":
                return winreg.HKEY_CURRENT_USER, restOfPath