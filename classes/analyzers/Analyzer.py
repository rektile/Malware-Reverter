
from loguru import logger


class Analyzer:

    def __init__(self):
        self.analyzerType = None
        self.snapshot1 = None
        self.snapshot2 = None

        self.difference = []

    def makeSnapshot(self):
        snap = self.snapshot()

        if not self.snapshot1:
            self.snapshot1 = snap
        elif not self.snapshot2:
            self.snapshot2 = snap
        else:
            raise ValueError("Already got 2 snapshots!")

    def snapshot(self):
        raise NotImplementedError()

    def compare(self):
        raise NotImplementedError()

    def resultText(self):
        raise NotImplementedError()

    def showResults(self) -> bool:
        if not self.difference:
            return False

        self.resultText()
        lastLocation = None
        for change in self.difference:
            if change.location and change.location != lastLocation:
                lastLocation = change.location
                logger.info("")
                logger.info(f"[-] {change.location}")

            if isinstance(change.valueBefore, tuple) or isinstance(change.valueAfter, tuple):
                if not change.valueBefore:
                    logger.info(f"\t[-] New:")
                    logger.info(f"\t\t{change.valueAfter[0]}:{change.valueAfter[1]}")
                elif not change.valueAfter:
                    logger.info(f"\t[-] Removed:")
                    logger.info(f"\t\t{change.valueBefore[0]}:{change.valueBefore[1]}")
                else:
                    logger.info(f"\t[-] Changed:")
                    logger.info(f"\t\t{change.valueBefore[0]}:{change.valueBefore[1]} -> {change.valueAfter[0]}:{change.valueAfter[1]}")
            else:

                if not change.valueBefore:
                    logger.info(f"\t[-] New:")
                    logger.info(f"\t\t{change.valueAfter}")
                elif not change.valueAfter:
                    logger.info(f"\t[-] Removed:")
                    logger.info(f"\t\t{change.valueBefore}")
                else:
                    logger.info(f"\t[-] Changed:")
                    logger.info(f"\t\t{change.valueBefore} -> {change.valueAfter}")

        logger.info("")

        return True

