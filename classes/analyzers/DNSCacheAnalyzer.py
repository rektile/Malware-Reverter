from classes.analyzers.Analyzer import Analyzer
from classes.dataTypes.Changes import Changes
from classes.snapshots.DNSCacheSnapshot import DNSCacheSnapshot
from loguru import logger
import subprocess


class DNSCacheAnalyzer(Analyzer):
    def __init__(self):
        super().__init__()

    def resultText(self):
        logger.info("")
        logger.info("[!] These are new hostnames that are cached")

    def snapshot(self) -> list[DNSCacheSnapshot]:

        snapshots: list[DNSCacheSnapshot] = []

        with subprocess.Popen(["ipconfig", "/displaydns"], stdout=subprocess.PIPE, universal_newlines=True) as p:
            hostname = None
            ip = None

            for line in p.stdout:
                if "Record Name" in line:
                    hostname = line.split(":")[1].strip()

                elif "A (Host) Record" in line:
                    ip = line.split(":")[1].strip()

                if hostname and ip:
                    snap = DNSCacheSnapshot(hostname, ip)
                    snapshots.append(snap)
                    hostname = None
                    ip = None

        return snapshots

    def compare(self):

        allChanges = []

        for snap2 in self.snapshot2:
            if snap2 not in self.snapshot1:
                change = Changes(None, None, (snap2.hostname, snap2.ip))
                allChanges.append(change)

        self.difference = allChanges
