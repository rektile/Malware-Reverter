from classes.enum.EAnalyzerTypes import EAnalyzerTypes
from classes.dataTypes.Changes import Changes
from classes.utils import prepareRegistryPath
import pickle
import winreg


class MalwareReverter:

    def __init__(self):
        self.changesDict = None

    def loadChangesDict(self, filePath):
        try:
            with open(filePath, "rb") as f:
                self.changesDict = pickle.load(f)
        except FileNotFoundError as E:
            print(f"[!] Error finding file: {filePath}")
            exit()

    def revertChanges(self, filePath):

        self.loadChangesDict(filePath)

        for key, listChanges in self.changesDict.items():
            for change in listChanges:
                if key == EAnalyzerTypes.Registry:
                    self.registryReverter(change)

    def getRegistryType(self, value):
        pass

    def registryReverter(self, changes: Changes):
        if changes.valueBefore and changes.valueAfter:
            subKey, value = changes.valueBefore
            hkey, path = prepareRegistryPath(changes.location)
            try:
                soft = winreg.OpenKey(hkey, path, 0, winreg.KEY_WRITE)
                winreg.SetValueEx(soft, subKey, 0, changes.extra, value)
                soft.Close()
                print(f"[*] Reverted registry value: {changes.location} {subKey}:{value}")
            except PermissionError:
                print(f"[!] Failed to revert registry value: {changes.location} {subKey}:{value}")

        elif not changes.valueBefore:
            subKey, value = changes.valueAfter
            hkey, path = prepareRegistryPath(changes.location)
            try:
                soft = winreg.OpenKey(hkey, path, 0, winreg.KEY_WRITE)
                winreg.DeleteValue(soft, subKey)
                soft.Close()
                print(f"[*] Removed registry value: {changes.location} {subKey}:{value}")
            except PermissionError:
                print(f"[!] Failed to remove registry value: {changes.location} {subKey}:{value}")

        elif not changes.valueAfter:
            subKey, value = changes.valueBefore
            hkey, path = prepareRegistryPath(changes.location)
            try:
                soft = winreg.CreateKeyEx(hkey, path)
                winreg.SetValueEx(soft, subKey, 0, changes.extra, value)
                soft.Close()
                print(f"[*] Added registry value: {changes.location} {subKey}:{value}")
            except PermissionError:
                print(f"[!] Failed to add registry value: {changes.location} {subKey}:{value}")