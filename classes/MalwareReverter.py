from classes.analyzers.RegistryAnalyzer import RegistryAnalyzer
from classes.analyzers.FolderAnalyzer import FolderAnalyzer
from classes.analyzers.WindowsSchedulerAnalyzer import WindowsSchedulerAnalyzer
from classes.analyzers.WindowsDefenderAnalyzer import WindowsDefenderAnalyzer
from datetime import datetime
class MalwareReverter:
    def __init__(self):

        self.registryAnalyzer = RegistryAnalyzer()
        self.folderAnalyzer = FolderAnalyzer()
        self.windowsSchedulerAnalyzer = WindowsSchedulerAnalyzer()
        self.windowsDefenderAnalyzer = WindowsDefenderAnalyzer()


    def compareStartupSnapshots(self, snap1, snap2):
        differenceSet = set(snap2.keys()) - set(snap1.keys())
        difference = {key: snap2[key] for key in differenceSet}

        return difference

    def mergeStartupDifferences(self, *args):

        mergedDifference = {}
        for dic in args:
            for key, value in dic.items():
                key = key.lower()
                if key in mergedDifference:

                    mergedDifference[key].merge(value)
                else:
                    mergedDifference[key] = value

        return mergedDifference

    def compareRegistryTreeSnapshots(self, registryTree1, registryTree2):

        dictChanges = {}
        for snap1, snap2 in zip(registryTree1, registryTree2):
            dict1 = snap1.toDict()
            dict2 = snap2.toDict()

            for registryKey, valuesAfter in dict2.items():
                valuesBefore = dict1[registryKey]
                for value, data in valuesAfter.items():
                    if value not in valuesBefore:
                        dictChanges.setdefault(registryKey, {})
                        dictChanges[registryKey][value] = (None, valuesAfter[value])
                    elif valuesBefore[value] != valuesAfter[value]:
                        dictChanges.setdefault(registryKey, {})
                        dictChanges[registryKey][value] = (valuesBefore[value], valuesAfter[value])

        return dictChanges

    def showChanges(self, startupDifferences, windowsDefenderDifference):

        registryChanges = set()
        fileChanges = set()
        schedulerChanges = set()

        print()
        print("[*] Auto run changes.")

        for key, program in startupDifferences.items():
            registryChanges.update(program.registryPaths)
            fileChanges.update(program.filePaths)
            schedulerChanges.update(program.taskSchedule)

        print("[!] These startup values have been added to the registry: ")
        for path in registryChanges:
            print(path)

        print()

        print("[!] These files might be dangerous: ")
        for path in fileChanges:
            print(path)

        print()


        print("[!] These schedules have been made: ")
        for schedule in schedulerChanges:
            print(schedule)

        print()

        print("[*] Changes to the firewall/Windows defender")

        print("[!] Settings that have been added or changed")

        for registryKey, changes in windowsDefenderDifference.items():
            print(f"{registryKey}")
            for value, data in changes.items():
                print(f"{value}: {data[0]} -> {data[1]}")
            print()

        self.saveToFile(registryChanges, fileChanges, schedulerChanges, windowsDefenderDifference)

    def saveToFile(self, registryChanges, fileChanges, schedulerChanges, windowsDefenderChanges):

        now = datetime.now()

        fileName = now.strftime("%d-%m-%Y_%Hu%Mm%Ss") + ".txt"

        with open(fileName, "w") as f:

            f.write("[*] Auto run changes.\n")
            f.write("[!] These startup values have been added to the registry: \n")
            for path in registryChanges:
                f.write(f"{path}\n")

            f.write("\n")

            f.write("[!] These files might be dangerous: n")
            for path in fileChanges:
                f.write(f"{path}\n")

            f.write("\n")

            f.write("[!] These schedules have been made: \n")
            for path in schedulerChanges:
                f.write(f"{path}\n")

            f.write("\n")

            f.write("[*] Changes to the firewall/Windows defender\n")
            f.write("[!] Settings that have been added or changed\n")
            for registryKey, changes in windowsDefenderChanges.items():
                f.write(f"{registryKey}\n")
                for value, data in changes.items():
                    f.write(f"{value}: \n")
                    f.write(f"\tFrom: {data[0]}\n")
                    f.write(f"\tTo: {data[1]}\n")
                f.write("\n")

    def run(self):
        print(f"[*] Making first snapshot...")

        registrySnap1 = self.registryAnalyzer.makeSnapshot()
        folderSnap1 = self.folderAnalyzer.makeSnapshot()
        schedulerSnap1 = self.windowsSchedulerAnalyzer.makeSnapshot()
        windowsDefenderSnap1 = self.windowsDefenderAnalyzer.makeSnapshot()

        print(f"[*] Completed snapshot 1")

        input("[-] Press enter when you have fully executed the program. ")

        print(f"[*] Making second snapshot...")

        registrySnap2 = self.registryAnalyzer.makeSnapshot()
        folderSnap2 = self.folderAnalyzer.makeSnapshot()
        schedulerSnap2 = self.windowsSchedulerAnalyzer.makeSnapshot()
        windowsDefenderSnap2 = self.windowsDefenderAnalyzer.makeSnapshot()

        print("[*] Comparing snapshots.")

        registryDifference = self.compareStartupSnapshots(registrySnap1, registrySnap2)
        folderDifference = self.compareStartupSnapshots(folderSnap1, folderSnap2)
        schedulerDifference = self.compareStartupSnapshots(schedulerSnap1, schedulerSnap2)
        windowsDefenderDifference = self.compareRegistryTreeSnapshots(windowsDefenderSnap1, windowsDefenderSnap2)

        mergedDifference = self.mergeStartupDifferences(registryDifference, folderDifference, schedulerDifference)

        self.showChanges(mergedDifference, windowsDefenderDifference)

        input("[*] Press enter to exit")