from classes.analyzers.registry.AutoRunRegistryAnalyzer import AutoRunRegistryAnalyzer
from classes.analyzers.registry.WindowsDefenderAnalyzer import WindowsDefenderAnalyzer
from classes.analyzers.registry.ServiceRegistryAnalyzer import ServiceRegistryAnalyzer
from classes.analyzers.other.WindowsSchedulerAnalyzer import WindowsSchedulerAnalyzer
from classes.analyzers.folder.StartupFolderAnalyzer import StartupFolderAnalyzer
from classes.analyzers.registry.GroupPolicyAnalyzer import GroupPolicyAnalyzer
from classes.analyzers.folder.TempFolderAnalyzer import TempFolderAnalyzer
from classes.analyzers.other.ProcessAnalyzer import ProcessAnalyzer
from classes.analyzers.other.DNSCacheAnalyzer import DNSCacheAnalyzer
from classes.utils import initProgram
from datetime import datetime
from loguru import logger
import pickle


class MalwareWatcher:
    def __init__(self):

        initProgram()

        self.analyzers = [
            AutoRunRegistryAnalyzer(),
            WindowsDefenderAnalyzer(),
            ServiceRegistryAnalyzer(),
            WindowsSchedulerAnalyzer(),
            StartupFolderAnalyzer(),
            GroupPolicyAnalyzer(),
            TempFolderAnalyzer(),
            ProcessAnalyzer(),
            DNSCacheAnalyzer()
        ]

    def makeSnapshots(self) -> list:

        for analyzer in self.analyzers:
            analyzer.makeSnapshot()

    def compareSnapshots(self):

        for analyzer in self.analyzers:
            analyzer.compare()

    def showResults(self) -> bool:

        gotResults = any(analyzer.showResults() for analyzer in self.analyzers)

        return gotResults

    def saveChanges(self):
        changeDic = {}

        for analyzer in self.analyzers:
            if analyzer.difference:
                changeDic.setdefault(analyzer.analyzerType, [])
                changeDic[analyzer.analyzerType] += analyzer.difference

        now = datetime.now()
        fileName = f'changes_{now.strftime("%d-%m-%Y_%Hu%Mm%Ss")}.changes'

        with open(f"./change/{fileName}", "wb") as f:
            pickle.dump(changeDic, f)

    def run(self):

        print(f"[*] Making first snapshot...")

        self.makeSnapshots()

        input("[-] Press enter when you have fully executed the program. ")

        print(f"[*] Making second snapshot...")

        self.makeSnapshots()

        self.compareSnapshots()

        if not self.showResults():
            logger.info("[!] No changes found")
        else:
            self.saveChanges()

        input("Press ENTER to close...")
