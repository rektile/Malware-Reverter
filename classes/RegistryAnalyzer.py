import winreg
from classes.Program import Program

class RegistryAnalyzer:
    def __init__(self):
        self.startupRegistry = [
            r"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
            r"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce",
            r"HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
            r"HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce"
        ]

        self.programDic = {}

    def prepareRegistryPath(self, path):
        HKeyString, restOfPath = path.split("\\", 1)

        match HKeyString:
            case "HKEY_LOCAL_MACHINE":
                return winreg.HKEY_LOCAL_MACHINE, restOfPath
            case "HKEY_CURRENT_USER":
                return winreg.HKEY_CURRENT_USER, restOfPath

    def extractPath(self, valueData):
        newPath = valueData.split(".exe")[0] + ".exe"
        newPath = newPath.replace("\"", "")
        return newPath

    def makeSnapshot(self):

        programDic = {}

        for path in self.startupRegistry:

            hkey, registryPath = self.prepareRegistryPath(path)
            soft = winreg.OpenKey(hkey, registryPath)

            i = 0
            while True:
                try:
                    name, valueData, identifier = winreg.EnumValue(soft, i)

                    programPath = self.extractPath(valueData)

                    executableName = programPath.split("\\")[-1]

                    if executableName not in programDic:
                        p = Program()
                        p.executableName = executableName

                    else:
                        p = programDic[executableName]

                    p.filePaths.add(programPath)
                    p.registryPaths.add(registryPath)

                    programDic[executableName] = p

                    i += 1
                except OSError as E:
                    break

            winreg.CloseKey(soft)

        return programDic