from classes.snapshots.Snapshot import Snapshot
from classes.dataTypes.RegistryTree import RegistryTree


class RegistrySnapshot(Snapshot):

    def __init__(self, tree: RegistryTree):
        self.registryTree: RegistryTree = tree

    def compare(self, otherTree: 'RegistrySnapshot') -> dict:
        dictChanges = {}
        for snap1, snap2 in zip(self.registryTree, otherTree):
            dict1 = snap1.toDict()
            dict2 = snap2.toDict()

            for registryKey, valuesAfter in dict2.items():
                valuesBefore = dict1[registryKey]
                for value, data in valuesAfter.items():
                    if value not in valuesBefore:
                        dictChanges.setdefault(registryKey, {})
                        dictChanges[registryKey][value] = (None, valuesAfter[value])
                    elif valuesBefore[value] != valuesAfter[value]:
                        dictChanges.setdefault(registryKey, {})
                        dictChanges[registryKey][value] = (valuesBefore[value], valuesAfter[value])

        return dictChanges
